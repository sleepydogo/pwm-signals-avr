
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bb  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073f  00000000  00000000  00000bb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003ba  00000000  00000000  000012f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000016b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e4  00000000  00000000  000017a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 a4 00 	jmp	0x148	; 0x148 <__vector_14>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e9       	ldi	r30, 0x94	; 148
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
*/

int main(void)
{
	
	PWM_INIT_OUTPUTS();
  96:	0e 94 58 00 	call	0xb0	; 0xb0 <PWM_INIT_OUTPUTS>
	TIMER0_Init();
  9a:	0e 94 82 00 	call	0x104	; 0x104 <TIMER0_Init>
	TIMER1_Init();
  9e:	0e 94 8a 00 	call	0x114	; 0x114 <TIMER1_Init>
	PWM_CHANGE_DELTAS(255,145,1);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	61 e9       	ldi	r22, 0x91	; 145
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 75 00 	call	0xea	; 0xea <PWM_CHANGE_DELTAS>
	sei();
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x18>

000000b0 <PWM_INIT_OUTPUTS>:

static uint8_t delta_red = 1;
static uint8_t PWM_position = -1;

void PWM_INIT_OUTPUTS (void) {
	PORT_START;
  b0:	84 b1       	in	r24, 0x04	; 4
  b2:	86 62       	ori	r24, 0x26	; 38
  b4:	84 b9       	out	0x04, r24	; 4
  b6:	08 95       	ret

000000b8 <PWM_SOFTWARE_UPDATE>:
}

void PWM_SOFTWARE_UPDATE(void) {
	if (++PWM_position >= PWM_PERIOD) {
  b8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  bc:	8f 5f       	subi	r24, 0xFF	; 255
  be:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  c2:	8f 3f       	cpi	r24, 0xFF	; 255
  c4:	31 f4       	brne	.+12     	; 0xd2 <PWM_SOFTWARE_UPDATE+0x1a>
		PWM_position = 0;
  c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PWM_OFF;
  ca:	85 b1       	in	r24, 0x05	; 5
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	85 b9       	out	0x05, r24	; 5
  d0:	08 95       	ret
		} else {
		if (PWM_position < delta_red) {
  d2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
  d6:	89 17       	cp	r24, r25
  d8:	20 f4       	brcc	.+8      	; 0xe2 <PWM_SOFTWARE_UPDATE+0x2a>
			PWM_ON;
  da:	85 b1       	in	r24, 0x05	; 5
  dc:	8f 7d       	andi	r24, 0xDF	; 223
  de:	85 b9       	out	0x05, r24	; 5
  e0:	08 95       	ret
		}
		else {
			PWM_OFF;
  e2:	85 b1       	in	r24, 0x05	; 5
  e4:	80 62       	ori	r24, 0x20	; 32
  e6:	85 b9       	out	0x05, r24	; 5
  e8:	08 95       	ret

000000ea <PWM_CHANGE_DELTAS>:
		}
	}
}

void PWM_CHANGE_DELTAS(uint8_t red, uint8_t green, uint8_t blue) {
	delta_red = red;
  ea:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B = green;
  ee:	70 e0       	ldi	r23, 0x00	; 0
  f0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
  f4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;
  f8:	50 e0       	ldi	r21, 0x00	; 0
  fa:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
  fe:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 102:	08 95       	ret

00000104 <TIMER0_Init>:
#include "timer.h"


//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 104:	8e e4       	ldi	r24, 0x4E	; 78
 106:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 10c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 10e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 112:	08 95       	ret

00000114 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 114:	e1 e8       	ldi	r30, 0x81	; 129
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	8d 60       	ori	r24, 0x0D	; 13
 11c:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 11e:	e0 e8       	ldi	r30, 0x80	; 128
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 6c       	ori	r24, 0xC1	; 193
 126:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 128:	80 81       	ld	r24, Z
 12a:	80 63       	ori	r24, 0x30	; 48
 12c:	80 83       	st	Z, r24

		OCR1A = 255;			//blue
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 136:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 153;			//green
 13a:	89 e9       	ldi	r24, 0x99	; 153
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 142:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 146:	08 95       	ret

00000148 <__vector_14>:
}

ISR (TIMER0_COMPA_vect) {
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	2f 93       	push	r18
 154:	3f 93       	push	r19
 156:	4f 93       	push	r20
 158:	5f 93       	push	r21
 15a:	6f 93       	push	r22
 15c:	7f 93       	push	r23
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
 162:	af 93       	push	r26
 164:	bf 93       	push	r27
 166:	ef 93       	push	r30
 168:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
 16a:	0e 94 5c 00 	call	0xb8	; 0xb8 <PWM_SOFTWARE_UPDATE>
}
 16e:	ff 91       	pop	r31
 170:	ef 91       	pop	r30
 172:	bf 91       	pop	r27
 174:	af 91       	pop	r26
 176:	9f 91       	pop	r25
 178:	8f 91       	pop	r24
 17a:	7f 91       	pop	r23
 17c:	6f 91       	pop	r22
 17e:	5f 91       	pop	r21
 180:	4f 91       	pop	r20
 182:	3f 91       	pop	r19
 184:	2f 91       	pop	r18
 186:	0f 90       	pop	r0
 188:	0f be       	out	0x3f, r0	; 63
 18a:	0f 90       	pop	r0
 18c:	1f 90       	pop	r1
 18e:	18 95       	reti

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
