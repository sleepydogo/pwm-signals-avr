
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001a8  0000021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000021e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000941  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007bd  00000000  00000000  00000c51  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000048f  00000000  00000000  0000140e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  000018a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001dc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_14>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  8e:	0c 94 d2 00 	jmp	0x1a4	; 0x1a4 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <main>:
#include "main.h"

int main(void)
{
	
	PWM_INIT_OUTPUTS();
  96:	0e 94 62 00 	call	0xc4	; 0xc4 <PWM_INIT_OUTPUTS>
	TIMER0_Init();
  9a:	0e 94 8c 00 	call	0x118	; 0x118 <TIMER0_Init>
	TIMER1_Init();
  9e:	0e 94 94 00 	call	0x128	; 0x128 <TIMER1_Init>
	PWM_CHANGE_DELTAS(255,145,1);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	61 e9       	ldi	r22, 0x91	; 145
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	0e 94 7f 00 	call	0xfe	; 0xfe <PWM_CHANGE_DELTAS>
	sei();
  ac:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ae:	2a e2       	ldi	r18, 0x2A	; 42
  b0:	30 e5       	ldi	r19, 0x50	; 80
  b2:	8e ef       	ldi	r24, 0xFE	; 254
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	d9 f7       	brne	.-10     	; 0xb6 <main+0x20>
  c0:	00 00       	nop
  c2:	f5 cf       	rjmp	.-22     	; 0xae <main+0x18>

000000c4 <PWM_INIT_OUTPUTS>:

static uint8_t delta_red = 1;
static uint8_t PWM_position = -1;

void PWM_INIT_OUTPUTS (void) {
	PORT_START;
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	86 62       	ori	r24, 0x26	; 38
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	08 95       	ret

000000cc <PWM_SOFTWARE_UPDATE>:
}

void PWM_SOFTWARE_UPDATE(void) {
	if (++PWM_position >= PWM_PERIOD) {
  cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  d0:	8f 5f       	subi	r24, 0xFF	; 255
  d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  d6:	8f 3f       	cpi	r24, 0xFF	; 255
  d8:	31 f4       	brne	.+12     	; 0xe6 <PWM_SOFTWARE_UPDATE+0x1a>
		PWM_position = 0;
  da:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PWM_OFF;
  de:	85 b1       	in	r24, 0x05	; 5
  e0:	80 62       	ori	r24, 0x20	; 32
  e2:	85 b9       	out	0x05, r24	; 5
  e4:	08 95       	ret
		} else {
		if (PWM_position < delta_red) {
  e6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
  ea:	89 17       	cp	r24, r25
  ec:	20 f4       	brcc	.+8      	; 0xf6 <PWM_SOFTWARE_UPDATE+0x2a>
			PWM_ON;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret
		}
		else {
			PWM_OFF;
  f6:	85 b1       	in	r24, 0x05	; 5
  f8:	80 62       	ori	r24, 0x20	; 32
  fa:	85 b9       	out	0x05, r24	; 5
  fc:	08 95       	ret

000000fe <PWM_CHANGE_DELTAS>:
		}
	}
}

void PWM_CHANGE_DELTAS(uint8_t red, uint8_t green, uint8_t blue) {
	delta_red = red;
  fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B = green;
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 108:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;
 10c:	50 e0       	ldi	r21, 0x00	; 0
 10e:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 116:	08 95       	ret

00000118 <TIMER0_Init>:
#include "timer.h"


//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 118:	8e e4       	ldi	r24, 0x4E	; 78
 11a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 120:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 122:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 126:	08 95       	ret

00000128 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 128:	e1 e8       	ldi	r30, 0x81	; 129
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	8d 60       	ori	r24, 0x0D	; 13
 130:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 132:	e0 e8       	ldi	r30, 0x80	; 128
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	81 6c       	ori	r24, 0xC1	; 193
 13a:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 13c:	80 81       	ld	r24, Z
 13e:	80 63       	ori	r24, 0x30	; 48
 140:	80 83       	st	Z, r24

		OCR1A = 255;			//blue
 142:	8f ef       	ldi	r24, 0xFF	; 255
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 14a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 153;			//green
 14e:	89 e9       	ldi	r24, 0x99	; 153
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 156:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 15a:	08 95       	ret

0000015c <__vector_14>:
}

ISR (TIMER0_COMPA_vect) {
 15c:	1f 92       	push	r1
 15e:	0f 92       	push	r0
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	0f 92       	push	r0
 164:	11 24       	eor	r1, r1
 166:	2f 93       	push	r18
 168:	3f 93       	push	r19
 16a:	4f 93       	push	r20
 16c:	5f 93       	push	r21
 16e:	6f 93       	push	r22
 170:	7f 93       	push	r23
 172:	8f 93       	push	r24
 174:	9f 93       	push	r25
 176:	af 93       	push	r26
 178:	bf 93       	push	r27
 17a:	ef 93       	push	r30
 17c:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
 17e:	0e 94 66 00 	call	0xcc	; 0xcc <PWM_SOFTWARE_UPDATE>
}
 182:	ff 91       	pop	r31
 184:	ef 91       	pop	r30
 186:	bf 91       	pop	r27
 188:	af 91       	pop	r26
 18a:	9f 91       	pop	r25
 18c:	8f 91       	pop	r24
 18e:	7f 91       	pop	r23
 190:	6f 91       	pop	r22
 192:	5f 91       	pop	r21
 194:	4f 91       	pop	r20
 196:	3f 91       	pop	r19
 198:	2f 91       	pop	r18
 19a:	0f 90       	pop	r0
 19c:	0f be       	out	0x3f, r0	; 63
 19e:	0f 90       	pop	r0
 1a0:	1f 90       	pop	r1
 1a2:	18 95       	reti

000001a4 <_exit>:
 1a4:	f8 94       	cli

000001a6 <__stop_program>:
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <__stop_program>
