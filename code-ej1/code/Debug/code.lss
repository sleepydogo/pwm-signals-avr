
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001dc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800102  00800102  00000272  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000964  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c6  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000474  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001914  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000430  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00001f23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 b6 00 	jmp	0x16c	; 0x16c <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec ed       	ldi	r30, 0xDC	; 220
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 57 00 	call	0xae	; 0xae <main>
  9e:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SET_MEF_FLAG>:

void SET_MEF_FLAG(void) {
	mef_flag = 1;
}

void MEF_UPDATE() {
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  ac:	08 95       	ret

000000ae <main>:
}

int main(void)
{
	
	PWM_INIT_OUTPUTS();
  ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <PWM_INIT_OUTPUTS>
	TIMER0_Init();
  b2:	0e 94 94 00 	call	0x128	; 0x128 <TIMER0_Init>
	TIMER1_Init();
  b6:	0e 94 9c 00 	call	0x138	; 0x138 <TIMER1_Init>
	PWM_CHANGE_DELTAS(255,145,1);
  ba:	41 e0       	ldi	r20, 0x01	; 1
  bc:	61 e9       	ldi	r22, 0x91	; 145
  be:	8f ef       	ldi	r24, 0xFF	; 255
  c0:	0e 94 87 00 	call	0x10e	; 0x10e <PWM_CHANGE_DELTAS>
	sei();
  c4:	78 94       	sei
	while (1) {
		if (mef_flag) {
  c6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  ca:	88 23       	and	r24, r24
  cc:	e1 f3       	breq	.-8      	; 0xc6 <main+0x18>
			MEF_UPDATE();
			mef_flag = 0;
  ce:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
  d2:	f9 cf       	rjmp	.-14     	; 0xc6 <main+0x18>

000000d4 <PWM_INIT_OUTPUTS>:

static uint8_t delta_red = 1;
static uint8_t PWM_position = -1;

void PWM_INIT_OUTPUTS (void) {
	PORT_START;
  d4:	84 b1       	in	r24, 0x04	; 4
  d6:	86 62       	ori	r24, 0x26	; 38
  d8:	84 b9       	out	0x04, r24	; 4
  da:	08 95       	ret

000000dc <PWM_SOFTWARE_UPDATE>:
}

void PWM_SOFTWARE_UPDATE(void) {
	if (++PWM_position >= PWM_PERIOD) {
  dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
  e0:	8f 5f       	subi	r24, 0xFF	; 255
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	31 f4       	brne	.+12     	; 0xf6 <PWM_SOFTWARE_UPDATE+0x1a>
		PWM_position = 0;
  ea:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
		PWM_OFF;
  ee:	85 b1       	in	r24, 0x05	; 5
  f0:	80 62       	ori	r24, 0x20	; 32
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	08 95       	ret
		} else {
		if (PWM_position < delta_red) {
  f6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
  fa:	89 17       	cp	r24, r25
  fc:	20 f4       	brcc	.+8      	; 0x106 <PWM_SOFTWARE_UPDATE+0x2a>
			PWM_ON;
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8f 7d       	andi	r24, 0xDF	; 223
 102:	85 b9       	out	0x05, r24	; 5
 104:	08 95       	ret
		}
		else {
			PWM_OFF;
 106:	85 b1       	in	r24, 0x05	; 5
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	85 b9       	out	0x05, r24	; 5
 10c:	08 95       	ret

0000010e <PWM_CHANGE_DELTAS>:
		}
	}
}

void PWM_CHANGE_DELTAS(uint8_t red, uint8_t green, uint8_t blue) {
	delta_red = red;
 10e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B = green;
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 118:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;
 11c:	50 e0       	ldi	r21, 0x00	; 0
 11e:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 122:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 126:	08 95       	ret

00000128 <TIMER0_Init>:

static uint16_t mef_contador = 0;

//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 128:	8e e4       	ldi	r24, 0x4E	; 78
 12a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 12c:	82 e0       	ldi	r24, 0x02	; 2
 12e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 130:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 132:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 136:	08 95       	ret

00000138 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 138:	e1 e8       	ldi	r30, 0x81	; 129
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8d 60       	ori	r24, 0x0D	; 13
 140:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 142:	e0 e8       	ldi	r30, 0x80	; 128
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	81 6c       	ori	r24, 0xC1	; 193
 14a:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 14c:	80 81       	ld	r24, Z
 14e:	80 63       	ori	r24, 0x30	; 48
 150:	80 83       	st	Z, r24

		OCR1A = 255;			//blue
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 15a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 153;			//green
 15e:	89 e9       	ldi	r24, 0x99	; 153
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 166:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 16a:	08 95       	ret

0000016c <__vector_14>:
}

ISR (TIMER0_COMPA_vect) {
 16c:	1f 92       	push	r1
 16e:	0f 92       	push	r0
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	0f 92       	push	r0
 174:	11 24       	eor	r1, r1
 176:	2f 93       	push	r18
 178:	3f 93       	push	r19
 17a:	4f 93       	push	r20
 17c:	5f 93       	push	r21
 17e:	6f 93       	push	r22
 180:	7f 93       	push	r23
 182:	8f 93       	push	r24
 184:	9f 93       	push	r25
 186:	af 93       	push	r26
 188:	bf 93       	push	r27
 18a:	ef 93       	push	r30
 18c:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
 18e:	0e 94 6e 00 	call	0xdc	; 0xdc <PWM_SOFTWARE_UPDATE>
	if (++mef_contador == 126) {
 192:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <mef_contador>
 196:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <mef_contador+0x1>
 19a:	01 96       	adiw	r24, 0x01	; 1
 19c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <mef_contador+0x1>
 1a0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <mef_contador>
 1a4:	8e 37       	cpi	r24, 0x7E	; 126
 1a6:	91 05       	cpc	r25, r1
 1a8:	31 f4       	brne	.+12     	; 0x1b6 <__vector_14+0x4a>
		SET_MEF_FLAG();
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <SET_MEF_FLAG>
		mef_contador = 0;
 1ae:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <mef_contador+0x1>
 1b2:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <mef_contador>
	}
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <_exit>:
 1d8:	f8 94       	cli

000001da <__stop_program>:
 1da:	ff cf       	rjmp	.-2      	; 0x1da <__stop_program>
