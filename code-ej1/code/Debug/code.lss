
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002a4  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800104  00800104  0000033c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000036c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000003ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5e  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007d7  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000508  00000000  00000000  00001679  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000124  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000453  00000000  00000000  00001ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  000020fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000021e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 1a 01 	jmp	0x234	; 0x234 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ea       	ldi	r30, 0xA4	; 164
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9f 00 	call	0x13e	; 0x13e <main>
  9e:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <SET_MEF_FLAG>:
static t_eSystem eSystem;
static uint8_t mef_flag = 0;
static uint8_t state_call_count = -1;

void SET_MEF_FLAG(void) {
	mef_flag = 1;
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  ac:	08 95       	ret

000000ae <MEF_UPDATE>:
}

void MEF_UPDATE() {
	state_call_count++; 
  ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  b2:	8f 5f       	subi	r24, 0xFF	; 255
  b4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	switch (eSystem) {
  b8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <eSystem>
  bc:	91 30       	cpi	r25, 0x01	; 1
  be:	d1 f0       	breq	.+52     	; 0xf4 <MEF_UPDATE+0x46>
  c0:	28 f0       	brcs	.+10     	; 0xcc <MEF_UPDATE+0x1e>
  c2:	92 30       	cpi	r25, 0x02	; 2
  c4:	01 f1       	breq	.+64     	; 0x106 <MEF_UPDATE+0x58>
  c6:	93 30       	cpi	r25, 0x03	; 3
  c8:	91 f1       	breq	.+100    	; 0x12e <MEF_UPDATE+0x80>
  ca:	08 95       	ret
		case PRENDIENDO:
			if (state_call_count < 100) {
  cc:	84 36       	cpi	r24, 0x64	; 100
  ce:	30 f4       	brcc	.+12     	; 0xdc <MEF_UPDATE+0x2e>
				PWM_UPDATE_DELTAS((51/100), (153/100), (255/100));
  d0:	42 e0       	ldi	r20, 0x02	; 2
  d2:	61 e0       	ldi	r22, 0x01	; 1
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM_UPDATE_DELTAS>
  da:	08 95       	ret
			} else {
				PWM_CHANGE_DELTAS(51,153,255);
  dc:	4f ef       	ldi	r20, 0xFF	; 255
  de:	69 e9       	ldi	r22, 0x99	; 153
  e0:	83 e3       	ldi	r24, 0x33	; 51
  e2:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <PWM_CHANGE_DELTAS>
				eSystem = MAX;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <eSystem>
				state_call_count = -1;
  ec:	8f ef       	ldi	r24, 0xFF	; 255
  ee:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  f2:	08 95       	ret
			}
		break;
		case MAX:
			if (state_call_count < 200) {
  f4:	88 3c       	cpi	r24, 0xC8	; 200
  f6:	10 f5       	brcc	.+68     	; 0x13c <MEF_UPDATE+0x8e>
				eSystem = APAGANDO;
  f8:	82 e0       	ldi	r24, 0x02	; 2
  fa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <eSystem>
				state_call_count = -1;
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 104:	08 95       	ret
			}
		break;
		case APAGANDO:
			if (state_call_count < 100) {
 106:	84 36       	cpi	r24, 0x64	; 100
 108:	30 f4       	brcc	.+12     	; 0x116 <MEF_UPDATE+0x68>
				PWM_UPDATE_DELTAS(-(51/100), -(153/100), -(255/100));
 10a:	4e ef       	ldi	r20, 0xFE	; 254
 10c:	6f ef       	ldi	r22, 0xFF	; 255
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	0e 94 de 00 	call	0x1bc	; 0x1bc <PWM_UPDATE_DELTAS>
 114:	08 95       	ret
				} else {
				PWM_CHANGE_DELTAS(1,1,1);
 116:	41 e0       	ldi	r20, 0x01	; 1
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <PWM_CHANGE_DELTAS>
				eSystem = OFF;
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <eSystem>
				state_call_count = -1;
 126:	8f ef       	ldi	r24, 0xFF	; 255
 128:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 12c:	08 95       	ret
			}
		break;
		case OFF:
			if (state_call_count < 200) {
 12e:	88 3c       	cpi	r24, 0xC8	; 200
 130:	28 f4       	brcc	.+10     	; 0x13c <MEF_UPDATE+0x8e>
				eSystem = PRENDIENDO;
 132:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <eSystem>
				state_call_count = -1;
 136:	8f ef       	ldi	r24, 0xFF	; 255
 138:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 13c:	08 95       	ret

0000013e <main>:
}

int main(void)
{
	
	PWM_INIT_OUTPUTS();
 13e:	0e 94 b4 00 	call	0x168	; 0x168 <PWM_INIT_OUTPUTS>
	TIMER0_Init();
 142:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <TIMER0_Init>
	TIMER1_Init();
 146:	0e 94 00 01 	call	0x200	; 0x200 <TIMER1_Init>
	PWM_CHANGE_DELTAS(255,145,1);
 14a:	41 e0       	ldi	r20, 0x01	; 1
 14c:	61 e9       	ldi	r22, 0x91	; 145
 14e:	8f ef       	ldi	r24, 0xFF	; 255
 150:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <PWM_CHANGE_DELTAS>
	sei();
 154:	78 94       	sei
	while (1) {
		if (mef_flag) {
 156:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 15a:	88 23       	and	r24, r24
 15c:	e1 f3       	breq	.-8      	; 0x156 <main+0x18>
			MEF_UPDATE();
 15e:	0e 94 57 00 	call	0xae	; 0xae <MEF_UPDATE>
			mef_flag = 0;
 162:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 166:	f7 cf       	rjmp	.-18     	; 0x156 <main+0x18>

00000168 <PWM_INIT_OUTPUTS>:

static uint8_t delta_red = 1;
static uint8_t PWM_position = -1;

void PWM_INIT_OUTPUTS (void) {
	PORT_START;
 168:	84 b1       	in	r24, 0x04	; 4
 16a:	86 62       	ori	r24, 0x26	; 38
 16c:	84 b9       	out	0x04, r24	; 4
 16e:	08 95       	ret

00000170 <PWM_SOFTWARE_UPDATE>:
}

void PWM_SOFTWARE_UPDATE(void) {
	if (++PWM_position >= PWM_PERIOD) {
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <PWM_position>
 174:	8f 5f       	subi	r24, 0xFF	; 255
 176:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <PWM_position>
 17a:	8f 3f       	cpi	r24, 0xFF	; 255
 17c:	31 f4       	brne	.+12     	; 0x18a <PWM_SOFTWARE_UPDATE+0x1a>
		PWM_position = 0;
 17e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <PWM_position>
		PWM_OFF;
 182:	85 b1       	in	r24, 0x05	; 5
 184:	80 62       	ori	r24, 0x20	; 32
 186:	85 b9       	out	0x05, r24	; 5
 188:	08 95       	ret
		} else {
		if (PWM_position < delta_red) {
 18a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <delta_red>
 18e:	89 17       	cp	r24, r25
 190:	20 f4       	brcc	.+8      	; 0x19a <PWM_SOFTWARE_UPDATE+0x2a>
			PWM_ON;
 192:	85 b1       	in	r24, 0x05	; 5
 194:	8f 7d       	andi	r24, 0xDF	; 223
 196:	85 b9       	out	0x05, r24	; 5
 198:	08 95       	ret
		}
		else {
			PWM_OFF;
 19a:	85 b1       	in	r24, 0x05	; 5
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	85 b9       	out	0x05, r24	; 5
 1a0:	08 95       	ret

000001a2 <PWM_CHANGE_DELTAS>:
		}
	}
}

void PWM_CHANGE_DELTAS(uint8_t red, uint8_t green, uint8_t blue) {
	delta_red = red;
 1a2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delta_red>
	OCR1B = green;
 1a6:	70 e0       	ldi	r23, 0x00	; 0
 1a8:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1ac:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;
 1b0:	50 e0       	ldi	r21, 0x00	; 0
 1b2:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1b6:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 1ba:	08 95       	ret

000001bc <PWM_UPDATE_DELTAS>:
}

void PWM_UPDATE_DELTAS(int8_t red, int8_t green, int8_t blue) {
	delta_red += red;
 1bc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <delta_red>
 1c0:	89 0f       	add	r24, r25
 1c2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <delta_red>
	OCR1B += green;
 1c6:	ea e8       	ldi	r30, 0x8A	; 138
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	91 81       	ldd	r25, Z+1	; 0x01
 1ce:	86 0f       	add	r24, r22
 1d0:	91 1d       	adc	r25, r1
 1d2:	67 fd       	sbrc	r22, 7
 1d4:	9a 95       	dec	r25
 1d6:	91 83       	std	Z+1, r25	; 0x01
 1d8:	80 83       	st	Z, r24
	OCR1A += blue;
 1da:	e8 e8       	ldi	r30, 0x88	; 136
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	84 0f       	add	r24, r20
 1e4:	91 1d       	adc	r25, r1
 1e6:	47 fd       	sbrc	r20, 7
 1e8:	9a 95       	dec	r25
 1ea:	91 83       	std	Z+1, r25	; 0x01
 1ec:	80 83       	st	Z, r24
 1ee:	08 95       	ret

000001f0 <TIMER0_Init>:

static uint16_t mef_contador = 0;

//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 1f0:	8e e4       	ldi	r24, 0x4E	; 78
 1f2:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 1f8:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 1fa:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 1fe:	08 95       	ret

00000200 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 200:	e1 e8       	ldi	r30, 0x81	; 129
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	8d 60       	ori	r24, 0x0D	; 13
 208:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 20a:	e0 e8       	ldi	r30, 0x80	; 128
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	81 6c       	ori	r24, 0xC1	; 193
 212:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 214:	80 81       	ld	r24, Z
 216:	80 63       	ori	r24, 0x30	; 48
 218:	80 83       	st	Z, r24

		OCR1A = 255;			//blue
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 222:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		OCR1B = 153;			//green
 226:	89 e9       	ldi	r24, 0x99	; 153
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 22e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 232:	08 95       	ret

00000234 <__vector_14>:
}

ISR (TIMER0_COMPA_vect) {
 234:	1f 92       	push	r1
 236:	0f 92       	push	r0
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	0f 92       	push	r0
 23c:	11 24       	eor	r1, r1
 23e:	2f 93       	push	r18
 240:	3f 93       	push	r19
 242:	4f 93       	push	r20
 244:	5f 93       	push	r21
 246:	6f 93       	push	r22
 248:	7f 93       	push	r23
 24a:	8f 93       	push	r24
 24c:	9f 93       	push	r25
 24e:	af 93       	push	r26
 250:	bf 93       	push	r27
 252:	ef 93       	push	r30
 254:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
 256:	0e 94 b8 00 	call	0x170	; 0x170 <PWM_SOFTWARE_UPDATE>
	if (++mef_contador == 126) {
 25a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <mef_contador>
 25e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <mef_contador+0x1>
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <mef_contador+0x1>
 268:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <mef_contador>
 26c:	8e 37       	cpi	r24, 0x7E	; 126
 26e:	91 05       	cpc	r25, r1
 270:	31 f4       	brne	.+12     	; 0x27e <__vector_14+0x4a>
		SET_MEF_FLAG();
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <SET_MEF_FLAG>
		mef_contador = 0;
 276:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <mef_contador+0x1>
 27a:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <mef_contador>
	}
}
 27e:	ff 91       	pop	r31
 280:	ef 91       	pop	r30
 282:	bf 91       	pop	r27
 284:	af 91       	pop	r26
 286:	9f 91       	pop	r25
 288:	8f 91       	pop	r24
 28a:	7f 91       	pop	r23
 28c:	6f 91       	pop	r22
 28e:	5f 91       	pop	r21
 290:	4f 91       	pop	r20
 292:	3f 91       	pop	r19
 294:	2f 91       	pop	r18
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
