
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000288  0000031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000288  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  0000031e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b32  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084c  00000000  00000000  00000f72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000571  00000000  00000000  000017be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000138  00000000  00000000  00001d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000487  00000000  00000000  00001e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  000022ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  000023db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 42 01 	jmp	0x284	; 0x284 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
uint8_t MEF_cont = 0;

int main(void)
{
	
	TIMER0_Init();
  a6:	0e 94 2c 01 	call	0x258	; 0x258 <TIMER0_Init>
	TIMER1_Init();
  aa:	0e 94 34 01 	call	0x268	; 0x268 <TIMER1_Init>
	MEF_Init();
  ae:	0e 94 95 00 	call	0x12a	; 0x12a <MEF_Init>
	PWM_INIT_OUTPUTS();
  b2:	0e 94 09 01 	call	0x212	; 0x212 <PWM_INIT_OUTPUTS>
	sei();
  b6:	78 94       	sei
	while (1) {
		if (MEF_flag) {
  b8:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <MEF_flag>
  bc:	88 23       	and	r24, r24
  be:	e1 f3       	breq	.-8      	; 0xb8 <main+0x12>
			MEF_UPDATE();
  c0:	0e 94 9b 00 	call	0x136	; 0x136 <MEF_UPDATE>
			MEF_flag = 0;
  c4:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <MEF_flag>
  c8:	f7 cf       	rjmp	.-18     	; 0xb8 <main+0x12>

000000ca <__vector_14>:
		}
	}
}

ISR (TIMER0_COMPA_vect) {
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
  d4:	2f 93       	push	r18
  d6:	3f 93       	push	r19
  d8:	4f 93       	push	r20
  da:	5f 93       	push	r21
  dc:	6f 93       	push	r22
  de:	7f 93       	push	r23
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
  e4:	af 93       	push	r26
  e6:	bf 93       	push	r27
  e8:	ef 93       	push	r30
  ea:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
  ec:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <PWM_SOFTWARE_UPDATE>
	if (++ MEF_cont == 126) { // Cada 5ms se chequea la MEF
  f0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
  fa:	8e 37       	cpi	r24, 0x7E	; 126
  fc:	29 f4       	brne	.+10     	; 0x108 <__vector_14+0x3e>
		MEF_flag = 1;
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <MEF_flag>
		MEF_cont = 0;
 104:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 108:	ff 91       	pop	r31
 10a:	ef 91       	pop	r30
 10c:	bf 91       	pop	r27
 10e:	af 91       	pop	r26
 110:	9f 91       	pop	r25
 112:	8f 91       	pop	r24
 114:	7f 91       	pop	r23
 116:	6f 91       	pop	r22
 118:	5f 91       	pop	r21
 11a:	4f 91       	pop	r20
 11c:	3f 91       	pop	r19
 11e:	2f 91       	pop	r18
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <MEF_Init>:
#include "MEF.h"
static t_eSystem eSystem;
static uint8_t state_call_count;

void MEF_Init(){
	eSystem = PRENDIENDO;
 12a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <eSystem>
	state_call_count = -1;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
 130:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_call_count>
 134:	08 95       	ret

00000136 <MEF_UPDATE>:
}

void MEF_UPDATE() {
	state_call_count++;
 136:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state_call_count>
 13a:	8f 5f       	subi	r24, 0xFF	; 255
 13c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_call_count>
	switch (eSystem) {
 140:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <eSystem>
 144:	91 30       	cpi	r25, 0x01	; 1
 146:	c1 f0       	breq	.+48     	; 0x178 <MEF_UPDATE+0x42>
 148:	28 f0       	brcs	.+10     	; 0x154 <MEF_UPDATE+0x1e>
 14a:	92 30       	cpi	r25, 0x02	; 2
 14c:	e1 f0       	breq	.+56     	; 0x186 <MEF_UPDATE+0x50>
 14e:	93 30       	cpi	r25, 0x03	; 3
 150:	a1 f1       	breq	.+104    	; 0x1ba <MEF_UPDATE+0x84>
 152:	08 95       	ret
		case PRENDIENDO:
		if (state_call_count < 100) {
 154:	84 36       	cpi	r24, 0x64	; 100
 156:	48 f4       	brcc	.+18     	; 0x16a <MEF_UPDATE+0x34>
			PWM_UPDATE_DELTAS((151/100), (153/100), (255/100));
 158:	42 e0       	ldi	r20, 0x02	; 2
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	61 e0       	ldi	r22, 0x01	; 1
 15e:	70 e0       	ldi	r23, 0x00	; 0
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	0e 94 12 01 	call	0x224	; 0x224 <PWM_UPDATE_DELTAS>
 168:	08 95       	ret
			} else {
			eSystem = MAX;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <eSystem>
			state_call_count = -1;
 170:	8f ef       	ldi	r24, 0xFF	; 255
 172:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_call_count>
 176:	08 95       	ret
		}
		break;
		case MAX:
		if (state_call_count < 600) {
			eSystem = APAGANDO;
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <eSystem>
			state_call_count = -1;
 17e:	8f ef       	ldi	r24, 0xFF	; 255
 180:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_call_count>
		}
		break;
 184:	08 95       	ret
		case APAGANDO:
		if (state_call_count < 100) {
 186:	84 36       	cpi	r24, 0x64	; 100
 188:	48 f4       	brcc	.+18     	; 0x19c <MEF_UPDATE+0x66>
			PWM_UPDATE_DELTAS(-(151/100), -(153/100), -(255/100));
 18a:	4e ef       	ldi	r20, 0xFE	; 254
 18c:	5f ef       	ldi	r21, 0xFF	; 255
 18e:	6f ef       	ldi	r22, 0xFF	; 255
 190:	7f ef       	ldi	r23, 0xFF	; 255
 192:	8f ef       	ldi	r24, 0xFF	; 255
 194:	9f ef       	ldi	r25, 0xFF	; 255
 196:	0e 94 12 01 	call	0x224	; 0x224 <PWM_UPDATE_DELTAS>
 19a:	08 95       	ret
			} else {
			PWM_CHANGE_DELTAS(1,1,1);
 19c:	41 e0       	ldi	r20, 0x01	; 1
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	70 e0       	ldi	r23, 0x00	; 0
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	90 e0       	ldi	r25, 0x00	; 0
 1a8:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <PWM_CHANGE_DELTAS>
			eSystem = OFF;
 1ac:	83 e0       	ldi	r24, 0x03	; 3
 1ae:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <eSystem>
			state_call_count = -1;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_call_count>
 1b8:	08 95       	ret
		}
		break;
		case OFF:
		if (state_call_count < 600) {
			eSystem = PRENDIENDO;
 1ba:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <eSystem>
			state_call_count = -1;
 1be:	8f ef       	ldi	r24, 0xFF	; 255
 1c0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state_call_count>
 1c4:	08 95       	ret

000001c6 <PWM_SOFTWARE_UPDATE>:
 1c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d0:	8f 3f       	cpi	r24, 0xFF	; 255
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <PWM_SOFTWARE_UPDATE+0x1a>
 1d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	85 b1       	in	r24, 0x05	; 5
 1da:	80 62       	ori	r24, 0x20	; 32
 1dc:	85 b9       	out	0x05, r24	; 5
 1de:	08 95       	ret
 1e0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
 1e4:	89 17       	cp	r24, r25
 1e6:	20 f4       	brcc	.+8      	; 0x1f0 <PWM_SOFTWARE_UPDATE+0x2a>
 1e8:	85 b1       	in	r24, 0x05	; 5
 1ea:	8f 7d       	andi	r24, 0xDF	; 223
 1ec:	85 b9       	out	0x05, r24	; 5
 1ee:	08 95       	ret
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	80 62       	ori	r24, 0x20	; 32
 1f4:	85 b9       	out	0x05, r24	; 5
 1f6:	08 95       	ret

000001f8 <PWM_CHANGE_DELTAS>:
 1f8:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
 1fc:	70 e0       	ldi	r23, 0x00	; 0
 1fe:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 202:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 206:	50 e0       	ldi	r21, 0x00	; 0
 208:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 20c:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 210:	08 95       	ret

00000212 <PWM_INIT_OUTPUTS>:
 212:	84 b1       	in	r24, 0x04	; 4
 214:	86 62       	ori	r24, 0x26	; 38
 216:	84 b9       	out	0x04, r24	; 4
 218:	41 e0       	ldi	r20, 0x01	; 1
 21a:	61 e0       	ldi	r22, 0x01	; 1
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <PWM_CHANGE_DELTAS>
 222:	08 95       	ret

00000224 <PWM_UPDATE_DELTAS>:
 224:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
 228:	89 0f       	add	r24, r25
 22a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
 22e:	ea e8       	ldi	r30, 0x8A	; 138
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	91 81       	ldd	r25, Z+1	; 0x01
 236:	86 0f       	add	r24, r22
 238:	91 1d       	adc	r25, r1
 23a:	67 fd       	sbrc	r22, 7
 23c:	9a 95       	dec	r25
 23e:	91 83       	std	Z+1, r25	; 0x01
 240:	80 83       	st	Z, r24
 242:	e8 e8       	ldi	r30, 0x88	; 136
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	91 81       	ldd	r25, Z+1	; 0x01
 24a:	84 0f       	add	r24, r20
 24c:	91 1d       	adc	r25, r1
 24e:	47 fd       	sbrc	r20, 7
 250:	9a 95       	dec	r25
 252:	91 83       	std	Z+1, r25	; 0x01
 254:	80 83       	st	Z, r24
 256:	08 95       	ret

00000258 <TIMER0_Init>:

#include "timer.h"

//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 258:	8e e4       	ldi	r24, 0x4E	; 78
 25a:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 260:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 262:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 266:	08 95       	ret

00000268 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 268:	e1 e8       	ldi	r30, 0x81	; 129
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	80 81       	ld	r24, Z
 26e:	8d 60       	ori	r24, 0x0D	; 13
 270:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 272:	e0 e8       	ldi	r30, 0x80	; 128
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	81 6c       	ori	r24, 0xC1	; 193
 27a:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 27c:	80 81       	ld	r24, Z
 27e:	80 63       	ori	r24, 0x30	; 48
 280:	80 83       	st	Z, r24
 282:	08 95       	ret

00000284 <_exit>:
 284:	f8 94       	cli

00000286 <__stop_program>:
 286:	ff cf       	rjmp	.-2      	; 0x286 <__stop_program>
