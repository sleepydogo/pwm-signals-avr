
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000320  000003b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000320  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800102  00800102  000003b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cdc  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008dd  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006dc  00000000  00000000  00001ac9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  000021a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a1  00000000  00000000  00002334  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  000027d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000028c1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e2       	ldi	r30, 0x20	; 32
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  9e:	0c 94 8e 01 	jmp	0x31c	; 0x31c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint16_t valorLeido = 0;

void ADC_Init(){
	
	  // Configure ADC clock prescaler.
	  ADCSRA |= (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 68       	ori	r24, 0x87	; 135
  ae:	80 83       	st	Z, r24

	  // Set ADC reference to AVCC.
	  ADMUX |= (1 << REFS0) | (1 << MUX0) | (1 << MUX1);
  b0:	ec e7       	ldi	r30, 0x7C	; 124
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	83 64       	ori	r24, 0x43	; 67
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <ADC_Read>:


uint16_t ADC_Read(void){

	// Start ADC conversion.
	ADCSRA |= (1 << ADSC);
  bc:	ea e7       	ldi	r30, 0x7A	; 122
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	80 83       	st	Z, r24

	// Wait for conversion to complete.
	while ((ADCSRA & (1 << ADSC)) == 0);
  c6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  ca:	86 ff       	sbrs	r24, 6
  cc:	fc cf       	rjmp	.-8      	; 0xc6 <ADC_Read+0xa>

	// Clear ADIF flag.
	ADCSRA |= (1 << ADIF);
  ce:	ea e7       	ldi	r30, 0x7A	; 122
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	80 61       	ori	r24, 0x10	; 16
  d6:	80 83       	st	Z, r24
	
	return ADC;
  d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  dc:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  e0:	08 95       	ret

000000e2 <main>:
static uint8_t MEF_flag = 0;
uint16_t MEF_cont = 0;

int main(void)
{
	TIMER0_Init();
  e2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <TIMER0_Init>
	TIMER1_Init();
  e6:	0e 94 74 01 	call	0x2e8	; 0x2e8 <TIMER1_Init>
	MEF_Init();
  ea:	0e 94 bc 00 	call	0x178	; 0x178 <MEF_Init>
	PWM_INIT_OUTPUTS();
  ee:	0e 94 49 01 	call	0x292	; 0x292 <PWM_INIT_OUTPUTS>
	ADC_Init();
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	sei();
  f6:	78 94       	sei
	while (1) {
		if (MEF_flag) {
  f8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEF_flag>
  fc:	88 23       	and	r24, r24
  fe:	e1 f3       	breq	.-8      	; 0xf8 <main+0x16>
			MEF_UPDATE();
 100:	0e 94 c2 00 	call	0x184	; 0x184 <MEF_UPDATE>
			MEF_flag = 0;
 104:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <MEF_flag>
 108:	f7 cf       	rjmp	.-18     	; 0xf8 <main+0x16>

0000010a <__vector_14>:
		}
	}
}

ISR (TIMER0_COMPA_vect) {
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
 12c:	0e 94 23 01 	call	0x246	; 0x246 <PWM_SOFTWARE_UPDATE>
	if (++ MEF_cont == 1269) { // Cada 50ms se chequea la MEF
 130:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 134:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 13e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 142:	85 3f       	cpi	r24, 0xF5	; 245
 144:	94 40       	sbci	r25, 0x04	; 4
 146:	39 f4       	brne	.+14     	; 0x156 <__vector_14+0x4c>
		MEF_flag = 1;
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <MEF_flag>
		MEF_cont = 0;
 14e:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <__data_end+0x1>
 152:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__data_end>
	}
}
 156:	ff 91       	pop	r31
 158:	ef 91       	pop	r30
 15a:	bf 91       	pop	r27
 15c:	af 91       	pop	r26
 15e:	9f 91       	pop	r25
 160:	8f 91       	pop	r24
 162:	7f 91       	pop	r23
 164:	6f 91       	pop	r22
 166:	5f 91       	pop	r21
 168:	4f 91       	pop	r20
 16a:	3f 91       	pop	r19
 16c:	2f 91       	pop	r18
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <MEF_Init>:
static t_eSystem eSystem;
static uint8_t state_call_count;
uint16_t valorADC = 0;

void MEF_Init(){
	eSystem = PRENDIENDO;
 178:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <eSystem>
	state_call_count = -1;
 17c:	8f ef       	ldi	r24, 0xFF	; 255
 17e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
 182:	08 95       	ret

00000184 <MEF_UPDATE>:
}

void MEF_UPDATE() {
	state_call_count++;
 184:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state_call_count>
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
	
	switch (eSystem) {
 18e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <eSystem>
 192:	91 30       	cpi	r25, 0x01	; 1
 194:	d1 f0       	breq	.+52     	; 0x1ca <MEF_UPDATE+0x46>
 196:	28 f0       	brcs	.+10     	; 0x1a2 <MEF_UPDATE+0x1e>
 198:	92 30       	cpi	r25, 0x02	; 2
 19a:	01 f1       	breq	.+64     	; 0x1dc <MEF_UPDATE+0x58>
 19c:	93 30       	cpi	r25, 0x03	; 3
 19e:	b9 f1       	breq	.+110    	; 0x20e <MEF_UPDATE+0x8a>
 1a0:	08 95       	ret
		case PRENDIENDO:
		if (state_call_count < 10) {
 1a2:	8a 30       	cpi	r24, 0x0A	; 10
 1a4:	30 f4       	brcc	.+12     	; 0x1b2 <MEF_UPDATE+0x2e>
			PWM_UPDATE_DELTAS((RED/10), (GREEN/10), (BLUE/10));
 1a6:	49 e1       	ldi	r20, 0x19	; 25
 1a8:	6f e0       	ldi	r22, 0x0F	; 15
 1aa:	85 e0       	ldi	r24, 0x05	; 5
 1ac:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PWM_UPDATE_DELTAS>
 1b0:	08 95       	ret
		} else {
			PWM_UPDATE_DELTAS((RED%10) , (GREEN%10), (BLUE%10));
 1b2:	45 e0       	ldi	r20, 0x05	; 5
 1b4:	63 e0       	ldi	r22, 0x03	; 3
 1b6:	86 e0       	ldi	r24, 0x06	; 6
 1b8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PWM_UPDATE_DELTAS>
			eSystem = MAX;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <eSystem>
			state_call_count = -1;
 1c2:	8f ef       	ldi	r24, 0xFF	; 255
 1c4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
 1c8:	08 95       	ret
		}
		break;
		case MAX:
		if (state_call_count == 20) {
 1ca:	84 31       	cpi	r24, 0x14	; 20
 1cc:	d9 f5       	brne	.+118    	; 0x244 <MEF_UPDATE+0xc0>
			eSystem = APAGANDO;
 1ce:	82 e0       	ldi	r24, 0x02	; 2
 1d0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <eSystem>
			state_call_count = -1;
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
 1da:	08 95       	ret
		}
		break;
		case APAGANDO:
		if (state_call_count < 10) {
 1dc:	8a 30       	cpi	r24, 0x0A	; 10
 1de:	30 f4       	brcc	.+12     	; 0x1ec <MEF_UPDATE+0x68>
			PWM_UPDATE_DELTAS(-(RED/10), -(GREEN/10), -(BLUE/10));
 1e0:	47 ee       	ldi	r20, 0xE7	; 231
 1e2:	61 ef       	ldi	r22, 0xF1	; 241
 1e4:	8b ef       	ldi	r24, 0xFB	; 251
 1e6:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PWM_UPDATE_DELTAS>
 1ea:	08 95       	ret
		} else {
			PWM_UPDATE_DELTAS(-RED%10, -GREEN%10, -BLUE%10);
 1ec:	4b ef       	ldi	r20, 0xFB	; 251
 1ee:	6d ef       	ldi	r22, 0xFD	; 253
 1f0:	8a ef       	ldi	r24, 0xFA	; 250
 1f2:	0e 94 52 01 	call	0x2a4	; 0x2a4 <PWM_UPDATE_DELTAS>
			TIMER1_OFF();
 1f6:	0e 94 88 01 	call	0x310	; 0x310 <TIMER1_OFF>
			PORTB |= (1 << PORTB5);
 1fa:	85 b1       	in	r24, 0x05	; 5
 1fc:	80 62       	ori	r24, 0x20	; 32
 1fe:	85 b9       	out	0x05, r24	; 5
			eSystem = OFF;
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <eSystem>
			state_call_count = -1;
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
 20c:	08 95       	ret
		}
		break;
		case OFF:
		valorADC = ADC_Read();
 20e:	0e 94 5e 00 	call	0xbc	; 0xbc <ADC_Read>
 212:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <valorADC+0x1>
 216:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <valorADC>
		if (valorADC == 33){
 21a:	81 97       	sbiw	r24, 0x21	; 33
 21c:	61 f4       	brne	.+24     	; 0x236 <MEF_UPDATE+0xb2>
			if (state_call_count == 60) {
 21e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <state_call_count>
 222:	8c 33       	cpi	r24, 0x3C	; 60
 224:	79 f4       	brne	.+30     	; 0x244 <MEF_UPDATE+0xc0>
				TIMER1_ON();
 226:	0e 94 82 01 	call	0x304	; 0x304 <TIMER1_ON>
				eSystem = PRENDIENDO;
 22a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <eSystem>
				state_call_count = -1;
 22e:	8f ef       	ldi	r24, 0xFF	; 255
 230:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
 234:	08 95       	ret
			}			
		}else{
			TIMER1_ON();
 236:	0e 94 82 01 	call	0x304	; 0x304 <TIMER1_ON>
			eSystem = PRENDIENDO;
 23a:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <eSystem>
			state_call_count = -1;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state_call_count>
 244:	08 95       	ret

00000246 <PWM_SOFTWARE_UPDATE>:
	PORT_START;
	PWM_CHANGE_DELTAS(0,0,0);
}

void PWM_SOFTWARE_UPDATE(void) {
	if (++PWM_position >= PWM_PERIOD) {
 246:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 24a:	8f 5f       	subi	r24, 0xFF	; 255
 24c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 250:	8f 3f       	cpi	r24, 0xFF	; 255
 252:	31 f4       	brne	.+12     	; 0x260 <PWM_SOFTWARE_UPDATE+0x1a>
		PWM_position = 0;
 254:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PWM_OFF;
 258:	85 b1       	in	r24, 0x05	; 5
 25a:	80 62       	ori	r24, 0x20	; 32
 25c:	85 b9       	out	0x05, r24	; 5
 25e:	08 95       	ret
		} else {
		if (PWM_position < delta_red) {
 260:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
 264:	89 17       	cp	r24, r25
 266:	20 f4       	brcc	.+8      	; 0x270 <PWM_SOFTWARE_UPDATE+0x2a>
			PWM_ON;
 268:	85 b1       	in	r24, 0x05	; 5
 26a:	8f 7d       	andi	r24, 0xDF	; 223
 26c:	85 b9       	out	0x05, r24	; 5
 26e:	08 95       	ret
		}
		else {
			PWM_OFF;
 270:	85 b1       	in	r24, 0x05	; 5
 272:	80 62       	ori	r24, 0x20	; 32
 274:	85 b9       	out	0x05, r24	; 5
 276:	08 95       	ret

00000278 <PWM_CHANGE_DELTAS>:
		}
	}
}

void PWM_CHANGE_DELTAS(uint8_t red, uint8_t green, uint8_t blue) {
	delta_red = red;
 278:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B = green;
 27c:	70 e0       	ldi	r23, 0x00	; 0
 27e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 282:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 28c:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 290:	08 95       	ret

00000292 <PWM_INIT_OUTPUTS>:

static uint8_t delta_red = 1;
static uint8_t PWM_position = -1;

void PWM_INIT_OUTPUTS (void) {
	PORT_START;
 292:	84 b1       	in	r24, 0x04	; 4
 294:	86 62       	ori	r24, 0x26	; 38
 296:	84 b9       	out	0x04, r24	; 4
	PWM_CHANGE_DELTAS(0,0,0);
 298:	40 e0       	ldi	r20, 0x00	; 0
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	80 e0       	ldi	r24, 0x00	; 0
 29e:	0e 94 3c 01 	call	0x278	; 0x278 <PWM_CHANGE_DELTAS>
 2a2:	08 95       	ret

000002a4 <PWM_UPDATE_DELTAS>:
	OCR1B = green;
	OCR1A = blue;
}

void PWM_UPDATE_DELTAS(int8_t red, int8_t green, int8_t blue) {
	delta_red += red;
 2a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
 2a8:	89 0f       	add	r24, r25
 2aa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B += green;
 2ae:	ea e8       	ldi	r30, 0x8A	; 138
 2b0:	f0 e0       	ldi	r31, 0x00	; 0
 2b2:	80 81       	ld	r24, Z
 2b4:	91 81       	ldd	r25, Z+1	; 0x01
 2b6:	86 0f       	add	r24, r22
 2b8:	91 1d       	adc	r25, r1
 2ba:	67 fd       	sbrc	r22, 7
 2bc:	9a 95       	dec	r25
 2be:	91 83       	std	Z+1, r25	; 0x01
 2c0:	80 83       	st	Z, r24
	OCR1A += blue;
 2c2:	e8 e8       	ldi	r30, 0x88	; 136
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	80 81       	ld	r24, Z
 2c8:	91 81       	ldd	r25, Z+1	; 0x01
 2ca:	84 0f       	add	r24, r20
 2cc:	91 1d       	adc	r25, r1
 2ce:	47 fd       	sbrc	r20, 7
 2d0:	9a 95       	dec	r25
 2d2:	91 83       	std	Z+1, r25	; 0x01
 2d4:	80 83       	st	Z, r24
 2d6:	08 95       	ret

000002d8 <TIMER0_Init>:

#include "timer.h"

//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 2d8:	8e e4       	ldi	r24, 0x4E	; 78
 2da:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 2e0:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 2e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2e6:	08 95       	ret

000002e8 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 2e8:	e1 e8       	ldi	r30, 0x81	; 129
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8d 60       	ori	r24, 0x0D	; 13
 2f0:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 2f2:	e0 e8       	ldi	r30, 0x80	; 128
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	81 6c       	ori	r24, 0xC1	; 193
 2fa:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 2fc:	80 81       	ld	r24, Z
 2fe:	80 63       	ori	r24, 0x30	; 48
 300:	80 83       	st	Z, r24
 302:	08 95       	ret

00000304 <TIMER1_ON>:
}

void TIMER1_ON(){
	TCCR1B |= (1 << CS12)|(1 << CS10);
 304:	e1 e8       	ldi	r30, 0x81	; 129
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	85 60       	ori	r24, 0x05	; 5
 30c:	80 83       	st	Z, r24
 30e:	08 95       	ret

00000310 <TIMER1_OFF>:
}

void TIMER1_OFF(){
	TCCR1B &= ~((1 << CS12)|(1 << CS10));
 310:	e1 e8       	ldi	r30, 0x81	; 129
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	8a 7f       	andi	r24, 0xFA	; 250
 318:	80 83       	st	Z, r24
 31a:	08 95       	ret

0000031c <_exit>:
 31c:	f8 94       	cli

0000031e <__stop_program>:
 31e:	ff cf       	rjmp	.-2      	; 0x31e <__stop_program>
