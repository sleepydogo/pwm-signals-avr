
code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000314  000003a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800102  00800102  000003aa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003aa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  0000041c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bf7  00000000  00000000  000004f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ba  00000000  00000000  000010eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006aa  00000000  00000000  000019a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002050  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000048c  00000000  00000000  000021bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ec  00000000  00000000  00002648  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e1       	ldi	r30, 0x14	; 20
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  9e:	0c 94 88 01 	jmp	0x310	; 0x310 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:
uint16_t valorLeido = 0;

void ADC_Init(){
	
	  // Configure ADC clock prescaler.
	  ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
  a6:	ea e7       	ldi	r30, 0x7A	; 122
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	87 60       	ori	r24, 0x07	; 7
  ae:	80 83       	st	Z, r24

	  // Enable ADC.
	  ADCSRA |= (1 << ADEN);
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24

	  // Set ADC reference to AVCC.
	  ADMUX |= (1 << REFS0);
  b6:	ec e7       	ldi	r30, 0x7C	; 124
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	80 83       	st	Z, r24

	  // Set ADC channel to 3.
	  ADMUX |= (1 << MUX0) | (1 << MUX1);
  c0:	80 81       	ld	r24, Z
  c2:	83 60       	ori	r24, 0x03	; 3
  c4:	80 83       	st	Z, r24
  c6:	08 95       	ret

000000c8 <ADC_Read>:


uint16_t ADC_Read(void){
	
	// Select ADC channel 3.
	ADMUX |= (1 << MUX0) | (1 << MUX1);
  c8:	ec e7       	ldi	r30, 0x7C	; 124
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	83 60       	ori	r24, 0x03	; 3
  d0:	80 83       	st	Z, r24

	// Start ADC conversion.
	ADCSRA |= (1 << ADSC);
  d2:	ea e7       	ldi	r30, 0x7A	; 122
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	80 64       	ori	r24, 0x40	; 64
  da:	80 83       	st	Z, r24

	// Wait for conversion to complete.
	while (ADCSRA & (1 << ADSC));
  dc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  e0:	86 fd       	sbrc	r24, 6
  e2:	fc cf       	rjmp	.-8      	; 0xdc <ADC_Read+0x14>

	// Clear ADIF flag.
	ADCSRA |= (1 << ADIF);
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 61       	ori	r24, 0x10	; 16
  ec:	80 83       	st	Z, r24
	
	valorLeido = ADC;
  ee:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  f2:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
  f6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
  fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>

	// Return ADC value.
	return valorLeido;
  fe:	08 95       	ret

00000100 <main>:
static uint8_t MEF_flag = 0;
uint16_t MEF_cont = 0;

int main(void)
{
	TIMER0_Init();
 100:	0e 94 72 01 	call	0x2e4	; 0x2e4 <TIMER0_Init>
	TIMER1_Init();
 104:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <TIMER1_Init>
	MEF_Init();
 108:	0e 94 cb 00 	call	0x196	; 0x196 <MEF_Init>
	PWM_INIT_OUTPUTS();
 10c:	0e 94 4f 01 	call	0x29e	; 0x29e <PWM_INIT_OUTPUTS>
	ADC_Init();
 110:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	sei();
 114:	78 94       	sei
	while (1) {
		if (MEF_flag) {
 116:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <MEF_flag>
 11a:	88 23       	and	r24, r24
 11c:	e1 f3       	breq	.-8      	; 0x116 <main+0x16>
			MEF_UPDATE();
 11e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <MEF_UPDATE>
			MEF_flag = 0;
 122:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <MEF_flag>
 126:	f7 cf       	rjmp	.-18     	; 0x116 <main+0x16>

00000128 <__vector_14>:
		}
	}
}

ISR (TIMER0_COMPA_vect) {
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	2f 93       	push	r18
 134:	3f 93       	push	r19
 136:	4f 93       	push	r20
 138:	5f 93       	push	r21
 13a:	6f 93       	push	r22
 13c:	7f 93       	push	r23
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
 146:	ef 93       	push	r30
 148:	ff 93       	push	r31
	PWM_SOFTWARE_UPDATE();
 14a:	0e 94 29 01 	call	0x252	; 0x252 <PWM_SOFTWARE_UPDATE>
	if (++ MEF_cont == 1269) { // Cada 50ms se chequea la MEF
 14e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <MEF_cont>
 152:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <MEF_cont+0x1>
 156:	01 96       	adiw	r24, 0x01	; 1
 158:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <MEF_cont+0x1>
 15c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <MEF_cont>
 160:	85 3f       	cpi	r24, 0xF5	; 245
 162:	94 40       	sbci	r25, 0x04	; 4
 164:	39 f4       	brne	.+14     	; 0x174 <__vector_14+0x4c>
		MEF_flag = 1;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <MEF_flag>
		MEF_cont = 0;
 16c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <MEF_cont+0x1>
 170:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <MEF_cont>
	}
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <MEF_Init>:
static t_eSystem eSystem;
static uint8_t state_call_count;
uint16_t valorADC = 0;

void MEF_Init(){
	eSystem = PRENDIENDO;
 196:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <eSystem>
	state_call_count = -1;
 19a:	8f ef       	ldi	r24, 0xFF	; 255
 19c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
 1a0:	08 95       	ret

000001a2 <MEF_UPDATE>:
}

void MEF_UPDATE() {
	state_call_count++;
 1a2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <state_call_count>
 1a6:	8f 5f       	subi	r24, 0xFF	; 255
 1a8:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
	
	switch (eSystem) {
 1ac:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <eSystem>
 1b0:	91 30       	cpi	r25, 0x01	; 1
 1b2:	d1 f0       	breq	.+52     	; 0x1e8 <MEF_UPDATE+0x46>
 1b4:	28 f0       	brcs	.+10     	; 0x1c0 <MEF_UPDATE+0x1e>
 1b6:	92 30       	cpi	r25, 0x02	; 2
 1b8:	01 f1       	breq	.+64     	; 0x1fa <MEF_UPDATE+0x58>
 1ba:	93 30       	cpi	r25, 0x03	; 3
 1bc:	91 f1       	breq	.+100    	; 0x222 <MEF_UPDATE+0x80>
 1be:	08 95       	ret
		case PRENDIENDO:
		if (state_call_count < 10) {
 1c0:	8a 30       	cpi	r24, 0x0A	; 10
 1c2:	30 f4       	brcc	.+12     	; 0x1d0 <MEF_UPDATE+0x2e>
			PWM_UPDATE_DELTAS((RED/10), (GREEN/10), (BLUE/10));
 1c4:	49 e1       	ldi	r20, 0x19	; 25
 1c6:	6f e0       	ldi	r22, 0x0F	; 15
 1c8:	85 e0       	ldi	r24, 0x05	; 5
 1ca:	0e 94 58 01 	call	0x2b0	; 0x2b0 <PWM_UPDATE_DELTAS>
 1ce:	08 95       	ret
		} else {
			PWM_UPDATE_DELTAS((RED%10) , (GREEN%10), (BLUE%10));
 1d0:	45 e0       	ldi	r20, 0x05	; 5
 1d2:	63 e0       	ldi	r22, 0x03	; 3
 1d4:	86 e0       	ldi	r24, 0x06	; 6
 1d6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <PWM_UPDATE_DELTAS>
			eSystem = MAX;
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <eSystem>
			state_call_count = -1;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
 1e6:	08 95       	ret
		}
		break;
		case MAX:
		if (state_call_count == 20) {
 1e8:	84 31       	cpi	r24, 0x14	; 20
 1ea:	91 f5       	brne	.+100    	; 0x250 <MEF_UPDATE+0xae>
			eSystem = APAGANDO;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <eSystem>
			state_call_count = -1;
 1f2:	8f ef       	ldi	r24, 0xFF	; 255
 1f4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
 1f8:	08 95       	ret
		}
		break;
		case APAGANDO:
		if (state_call_count < 10) {
 1fa:	8a 30       	cpi	r24, 0x0A	; 10
 1fc:	30 f4       	brcc	.+12     	; 0x20a <MEF_UPDATE+0x68>
			PWM_UPDATE_DELTAS(-(RED/10), -(GREEN/10), -(BLUE/10));
 1fe:	47 ee       	ldi	r20, 0xE7	; 231
 200:	61 ef       	ldi	r22, 0xF1	; 241
 202:	8b ef       	ldi	r24, 0xFB	; 251
 204:	0e 94 58 01 	call	0x2b0	; 0x2b0 <PWM_UPDATE_DELTAS>
 208:	08 95       	ret
		} else {
			PWM_UPDATE_DELTAS(-RED%10, -GREEN%10, -BLUE%10);
 20a:	4b ef       	ldi	r20, 0xFB	; 251
 20c:	6d ef       	ldi	r22, 0xFD	; 253
 20e:	8a ef       	ldi	r24, 0xFA	; 250
 210:	0e 94 58 01 	call	0x2b0	; 0x2b0 <PWM_UPDATE_DELTAS>
			eSystem = OFF;
 214:	83 e0       	ldi	r24, 0x03	; 3
 216:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <eSystem>
			state_call_count = -1;
 21a:	8f ef       	ldi	r24, 0xFF	; 255
 21c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
 220:	08 95       	ret
		}
		break;
		case OFF:
		valorADC = ADC_Read();
 222:	0e 94 64 00 	call	0xc8	; 0xc8 <ADC_Read>
 226:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <valorADC+0x1>
 22a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <valorADC>
		if (valorADC == 33){
 22e:	81 97       	sbiw	r24, 0x21	; 33
 230:	51 f4       	brne	.+20     	; 0x246 <MEF_UPDATE+0xa4>
			if (state_call_count == 60) {
 232:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <state_call_count>
 236:	8c 33       	cpi	r24, 0x3C	; 60
 238:	59 f4       	brne	.+22     	; 0x250 <MEF_UPDATE+0xae>
				eSystem = PRENDIENDO;
 23a:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <eSystem>
				state_call_count = -1;
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
 244:	08 95       	ret
			}			
		}else{
			eSystem = PRENDIENDO;
 246:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <eSystem>
			state_call_count = -1;
 24a:	8f ef       	ldi	r24, 0xFF	; 255
 24c:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <state_call_count>
 250:	08 95       	ret

00000252 <PWM_SOFTWARE_UPDATE>:
	PORT_START;
	PWM_CHANGE_DELTAS(0,0,0);
}

void PWM_SOFTWARE_UPDATE(void) {
	if (++PWM_position >= PWM_PERIOD) {
 252:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 256:	8f 5f       	subi	r24, 0xFF	; 255
 258:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 25c:	8f 3f       	cpi	r24, 0xFF	; 255
 25e:	31 f4       	brne	.+12     	; 0x26c <PWM_SOFTWARE_UPDATE+0x1a>
		PWM_position = 0;
 260:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PWM_OFF;
 264:	85 b1       	in	r24, 0x05	; 5
 266:	80 62       	ori	r24, 0x20	; 32
 268:	85 b9       	out	0x05, r24	; 5
 26a:	08 95       	ret
		} else {
		if (PWM_position < delta_red) {
 26c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
 270:	89 17       	cp	r24, r25
 272:	20 f4       	brcc	.+8      	; 0x27c <PWM_SOFTWARE_UPDATE+0x2a>
			PWM_ON;
 274:	85 b1       	in	r24, 0x05	; 5
 276:	8f 7d       	andi	r24, 0xDF	; 223
 278:	85 b9       	out	0x05, r24	; 5
 27a:	08 95       	ret
		}
		else {
			PWM_OFF;
 27c:	85 b1       	in	r24, 0x05	; 5
 27e:	80 62       	ori	r24, 0x20	; 32
 280:	85 b9       	out	0x05, r24	; 5
 282:	08 95       	ret

00000284 <PWM_CHANGE_DELTAS>:
		}
	}
}

void PWM_CHANGE_DELTAS(uint8_t red, uint8_t green, uint8_t blue) {
	delta_red = red;
 284:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B = green;
 288:	70 e0       	ldi	r23, 0x00	; 0
 28a:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 28e:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
	OCR1A = blue;
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	50 93 89 00 	sts	0x0089, r21	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 298:	40 93 88 00 	sts	0x0088, r20	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 29c:	08 95       	ret

0000029e <PWM_INIT_OUTPUTS>:

static uint8_t delta_red = 1;
static uint8_t PWM_position = -1;

void PWM_INIT_OUTPUTS (void) {
	PORT_START;
 29e:	84 b1       	in	r24, 0x04	; 4
 2a0:	86 62       	ori	r24, 0x26	; 38
 2a2:	84 b9       	out	0x04, r24	; 4
	PWM_CHANGE_DELTAS(0,0,0);
 2a4:	40 e0       	ldi	r20, 0x00	; 0
 2a6:	60 e0       	ldi	r22, 0x00	; 0
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	0e 94 42 01 	call	0x284	; 0x284 <PWM_CHANGE_DELTAS>
 2ae:	08 95       	ret

000002b0 <PWM_UPDATE_DELTAS>:
	OCR1B = green;
	OCR1A = blue;
}

void PWM_UPDATE_DELTAS(int8_t red, int8_t green, int8_t blue) {
	delta_red += red;
 2b0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <delta_red>
 2b4:	89 0f       	add	r24, r25
 2b6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <delta_red>
	OCR1B += green;
 2ba:	ea e8       	ldi	r30, 0x8A	; 138
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	91 81       	ldd	r25, Z+1	; 0x01
 2c2:	86 0f       	add	r24, r22
 2c4:	91 1d       	adc	r25, r1
 2c6:	67 fd       	sbrc	r22, 7
 2c8:	9a 95       	dec	r25
 2ca:	91 83       	std	Z+1, r25	; 0x01
 2cc:	80 83       	st	Z, r24
	OCR1A += blue;
 2ce:	e8 e8       	ldi	r30, 0x88	; 136
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	91 81       	ldd	r25, Z+1	; 0x01
 2d6:	84 0f       	add	r24, r20
 2d8:	91 1d       	adc	r25, r1
 2da:	47 fd       	sbrc	r20, 7
 2dc:	9a 95       	dec	r25
 2de:	91 83       	std	Z+1, r25	; 0x01
 2e0:	80 83       	st	Z, r24
 2e2:	08 95       	ret

000002e4 <TIMER0_Init>:

#include "timer.h"

//				Timer0	- interrupcion cada 39,4 us aprox
void TIMER0_Init(){
	OCR0A  = 78;            
 2e4:	8e e4       	ldi	r24, 0x4E	; 78
 2e6:	87 bd       	out	0x27, r24	; 39
	TCCR0A = (1<<WGM01);   // Modo CTC, clock interno, prescalador 8
 2e8:	82 e0       	ldi	r24, 0x02	; 2
 2ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1<<CS01);   
 2ec:	85 bd       	out	0x25, r24	; 37
	TIMSK0 = (1<<OCIE0A);   // Habilito Timer 0 en modo de interrupci�n de comparaci�n
 2ee:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 2f2:	08 95       	ret

000002f4 <TIMER1_Init>:
//				Timer1
void TIMER1_Init(){
		
		// Modo Fast PWM de 8 bits (WGM1[3:0] = 5)
		// N -> 1024 
		TCCR1B |= (1<<WGM12)|(1<<CS12)|(1<<CS10);
 2f4:	e1 e8       	ldi	r30, 0x81	; 129
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8d 60       	ori	r24, 0x0D	; 13
 2fc:	80 83       	st	Z, r24
		TCCR1A |= (1<<WGM10)|(1<<COM1A1)|(1<<COM1A0); // Para OC1A
 2fe:	e0 e8       	ldi	r30, 0x80	; 128
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	80 81       	ld	r24, Z
 304:	81 6c       	ori	r24, 0xC1	; 193
 306:	80 83       	st	Z, r24
		TCCR1A |= (1<<COM1B1)|(1<<COM1B0); // Para OC1B
 308:	80 81       	ld	r24, Z
 30a:	80 63       	ori	r24, 0x30	; 48
 30c:	80 83       	st	Z, r24
 30e:	08 95       	ret

00000310 <_exit>:
 310:	f8 94       	cli

00000312 <__stop_program>:
 312:	ff cf       	rjmp	.-2      	; 0x312 <__stop_program>
